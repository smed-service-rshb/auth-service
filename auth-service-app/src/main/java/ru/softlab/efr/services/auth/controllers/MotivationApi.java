/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.auth.controllers;

import ru.softlab.efr.services.auth.exchange.model.ErrorModel;
import java.time.LocalDate;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramAdmin;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramAdminList;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramUser;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramUserModify;
import ru.softlab.efr.services.auth.exchange.model.MotivationSettingsEditAdmin;
import org.springframework.core.io.Resource;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Motivation API
 */
public interface MotivationApi {

    /**
     * Запрос программы мотивации для текущего пользователя   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MotivationProgramUser> getMotivation() throws Exception;



    /**
     * Получить файл, прикрепленный к мотивации. 
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{motivationDocumentTypes}/attach-document",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getMotivationAttachment(@PathVariable("motivationDocumentTypes") String motivationDocumentTypes) throws Exception;



    /**
     * Получить файл, прикрепленный к мотивации. 
     * @param motivationId Идентификатор обращения клиента
     * @param motivationDocumentTypes Типы документов мотивации:  PASSPORT - Паспорт  CHECK_FORM - Форма, подтвержденная подписью   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{motivationId}/get-document/{motivationDocumentTypes}",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getMotivationAttachmentById(@PathVariable("motivationId") Long motivationId,@PathVariable("motivationDocumentTypes") String motivationDocumentTypes) throws Exception;



    /**
     * Запрос признака необходимости отображения окна мотивации   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/hide-window",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Boolean> getMotivationWindowHide() throws Exception;



    /**
     * Получить активную мотивацию для пользователя 
     * @param userId Идентификатор пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{userId}/get-latest",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MotivationProgramAdmin> getUserMotivationLatest(@PathVariable("userId") Long userId) throws Exception;



    /**
     * Получить список мотиваций для пользователя 
     * @param userId Идентификатор пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{userId}/get-hystory-list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MotivationProgramAdminList> getUserMotivationsList(@PathVariable("userId") Long userId) throws Exception;



    /**
     * Вывод отчета программ мотивации. 
     * @param startDate Дата начала формирования отчета
     * @param endDate Дата окончания формирования отчета  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/report",
        produces = { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getXlsxReport( @Valid @RequestParam(value = "startDate", required = false) LocalDate startDate, @Valid @RequestParam(value = "endDate", required = false) LocalDate endDate) throws Exception;



    /**
     * Редактирование настроек программы мотивации пользователя 
     * @param motivationId Идентификатор программы мотивации
     * @param updateMotivationSettingsRq Тело запроса обновления настроек программы мотивации  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{motivationId}/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> motivationByMotivationIdEdit(@PathVariable("motivationId") Long motivationId,@Valid @RequestBody MotivationSettingsEditAdmin updateMotivationSettingsRq) throws Exception;



    /**
     * Запрос на создание или редактирование программы мотивации для текущего пользователя 
     * @param motivationProgramUserModify Запрос на создания или редактирование программы мотивации для текущего пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MotivationProgramUser> postMotivation(@Valid @RequestBody MotivationProgramUserModify motivationProgramUserModify) throws Exception;



    /**
     * Получить данные печатной формы для мотивации.   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/print",
        produces = { "application/vnd.openxmlformats-officedocument.wordprocessingml.document" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> printMotivation() throws Exception;



    /**
     * Прикрепить файл к мотивации. 
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью 
     * @param content Прикрепляемый файл  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/motivation/{motivationDocumentTypes}/attach-document",
        method = RequestMethod.POST)
    ResponseEntity<String> uploadMotivationAttachment(@PathVariable("motivationDocumentTypes") String motivationDocumentTypes,@Valid @RequestPart(value="content", required=false) MultipartFile content) throws Exception;


}
