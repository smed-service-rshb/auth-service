/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.auth.controllers;

import ru.softlab.efr.services.auth.exchange.model.ChangeLoginData;
import ru.softlab.efr.services.auth.exchange.model.ChangePasswordData;
import ru.softlab.efr.services.auth.exchange.model.ChangePasswordRs;
import ru.softlab.efr.services.auth.exchange.model.CreateEmployeeRs;
import ru.softlab.efr.services.auth.exchange.model.CreateOrUpdateEmployeeRq;
import ru.softlab.efr.services.auth.exchange.model.EmploeeDataWithOrgUnits;
import ru.softlab.efr.services.auth.exchange.model.EmployeeDataForList;
import ru.softlab.efr.services.auth.exchange.model.ErrorData;
import ru.softlab.efr.services.auth.exchange.model.FilterEmployeesRq;
import ru.softlab.efr.services.auth.exchange.model.GetEmployeeRs;
import ru.softlab.efr.services.auth.exchange.model.LockEmployeeRq;
import ru.softlab.efr.services.auth.exchange.model.PrivateChangeLoginData;
import ru.softlab.efr.services.auth.exchange.model.SetPasswordData;
import ru.softlab.efr.services.auth.exchange.model.UpdateListStatus;
import ru.softlab.efr.services.auth.exchange.model.UpdateUserRq;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Employees API
 */
public interface EmployeesApi {

    /**
     * Запрос на изменение логина пользователя 
     * @param body Данные для изменения логина пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/changeLogin",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> changeLogin(@Valid @RequestBody ChangeLoginData body) throws Exception;



    /**
     * Запрос на изменение логина пользователя 
     * @param body Данные для изменения логина пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/changeLogin",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> changeLoginWithOutPermission(@Valid @RequestBody PrivateChangeLoginData body) throws Exception;



    /**
     * Запрос на изменение пароля пользователя 
     * @param changePasswordRequest Данные для изменения пароля пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/changePassword",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> changePassword(@Valid @RequestBody ChangePasswordData changePasswordRequest) throws Exception;



    /**
     * Запрос на изменение пароля пользователя 
     * @param changePasswordRequest Данные для изменения пароля пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/changePassword",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ChangePasswordRs> changePasswordPrivate(@Valid @RequestBody ChangePasswordData changePasswordRequest) throws Exception;



    /**
     * Создание сотрудника 
     * @param createEmployeeRq данные сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateEmployeeRs> createEmployee(@Valid @RequestBody CreateOrUpdateEmployeeRq createEmployeeRq) throws Exception;



    /**
     * Создание сотрудника (private api) 
     * @param createEmployeeRq данные сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employee",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateEmployeeRs> createEmployeeWithOutPermissions(@Valid @RequestBody CreateOrUpdateEmployeeRq createEmployeeRq) throws Exception;



    /**
     * Запрос удаления сотрудника 
     * @param id Идентификатор сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEmployee(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос получения информации о сотруднике 
     * @param id Идентификатор сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetEmployeeRs> getEmployeeById(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос получения информации о сотруднике 
     * @param id Идентификатор сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employees/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmploeeDataWithOrgUnits> getEmployeeByIdWithOutPermission(@PathVariable("id") Long id) throws Exception;



    /**
     * Получить пользователя системы по логину (private api) 
     * @param login Логин пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmployeeDataForList> getEmployeeByLoginWithOutPermissions(@NotNull  @Valid @RequestParam(value = "login") String login) throws Exception;



    /**
     * Получение списка учетных записей всех сотрудников. Список отсортирован по ФИО сотрудников. 
     * @param filterData Тело запроса с данными фильтрации
     * @param hasFilter Признак фильтрации сотрудников  
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Page<EmployeeDataForList>> getEmployees(@PageableDefault(value = 50) Pageable pageable, @Valid @RequestBody FilterEmployeesRq filterData, @Valid @RequestParam(value = "hasFilter", required = false) Boolean hasFilter) throws Exception;



    /**
     * Получение списка пользователей системы (private api) 
     * @param filterData Тело запроса с данными фильтрации  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employees",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDataForList>> getEmployeesWithOutPermissions(@Valid @RequestBody FilterEmployeesRq filterData) throws Exception;



    /**
     * Получение списка пользователей системы (private api)   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employees/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EmployeeDataForList>> getEmployeesWithOutPermissionsWithDeleted() throws Exception;



    /**
     * Запрос блокировки пользователя 
     * @param id Идентификатор сотрудника
     * @param lockEmployeeRq Тело запроса блокировки пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/{id}/lock",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> lockEmployee(@PathVariable("id") Long id,@Valid @RequestBody LockEmployeeRq lockEmployeeRq) throws Exception;



    /**
     * Установка технического пароля для клиента 
     * @param id Идентификатор клиента.
     * @param password Технический пароль  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/client/resetPassword/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> resetClientPasswordWithOutPermission(@PathVariable("id") Long id,@NotNull  @Valid @RequestParam(value = "password") String password) throws Exception;



    /**
     * Запрос на сброс пароля пользователя 
     * @param id Идентификатор сотрудника.  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/resetPassword/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> resetPassword(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос на установку пользователю пароля 
     * @param userId Идентификатор пользователя
     * @param setPasswordRq Данные для изменения пароля  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/setNewPassword/{userId}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> setPasswordWithOutPermission(@PathVariable("userId") Long userId,@Valid @RequestBody SetPasswordData setPasswordRq) throws Exception;



    /**
     * Получить статус синхронизация списка учетных записей сотрудников с файлом   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/import/sync/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UpdateListStatus> statusSyncEmployeeList() throws Exception;



    /**
     * Синхронизация списка учетных записей сотрудников с файлом   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/import/sync",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UpdateListStatus> syncEmployeeList() throws Exception;



    /**
     * Запрос разблокировки пользователя 
     * @param id Идентификатор сотрудника  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/{id}/unlock",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> unlockEmployee(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос обновления данных сотрудника 
     * @param id Идентификатор сотрудника
     * @param updateEmployeeRq Тело запроса обновления данных пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/employees/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEmployee(@PathVariable("id") Long id,@Valid @RequestBody CreateOrUpdateEmployeeRq updateEmployeeRq) throws Exception;



    /**
     * Запрос обновления данных сотрудника (private api) 
     * @param id Идентификатор сотрудника
     * @param updateEmployeeRq Тело запроса обновления данных пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/employees/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEmployeeWithOutPermissions(@PathVariable("id") Long id,@Valid @RequestBody CreateOrUpdateEmployeeRq updateEmployeeRq) throws Exception;



    /**
     * Запрос обновления основных полей пользователя (private api) 
     * @param id Идентификатор пользователя
     * @param updateUserRq Тело запроса обновления данных пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/user/{id}/update",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateUserWithOutPermissions(@PathVariable("id") Long id,@Valid @RequestBody UpdateUserRq updateUserRq) throws Exception;


}
