/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.auth.controllers;

import ru.softlab.efr.services.auth.exchange.model.EmployeeGroupRs;
import ru.softlab.efr.services.auth.exchange.model.ErrorData;
import ru.softlab.efr.services.auth.exchange.model.GroupData;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the EmployeeGroup API
 */
public interface EmployeeGroupApi {

    /**
     * Создание записи в справочнике групп пользователей 
     * @param groupData Данные записи справочника групп пользователя  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/groups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<GroupData> createGroup(@Valid @RequestBody GroupData groupData) throws Exception;



    /**
     * Запрос получения списка записей справочника групп пользователей с пегинацией   
     * @param pageable параметры пагинации 
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/groups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Page<GroupData>> getEmployeeGroupList(@PageableDefault(value = 50) Pageable pageable) throws Exception;



    /**
     * Получить список элементов справочника групп пользователей без учета прав   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/groups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmployeeGroupRs> getEmployeeGroupListWithOutPermissions() throws Exception;



    /**
     * Получение информации о группе пользователей 
     * @param id Идентификатор группу пользователей  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/groups/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GroupData> getGroupDataById(@PathVariable("id") Long id) throws Exception;



    /**
     * Обновление информации о группе пользователей 
     * @param id Идентификатор группы пользователей
     * @param groupData Новые данные о группе пользователей  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/groups/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateGroupById(@PathVariable("id") Long id,@Valid @RequestBody GroupData groupData) throws Exception;


}
