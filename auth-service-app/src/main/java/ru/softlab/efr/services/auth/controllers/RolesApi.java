/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.softlab.efr.services.auth.controllers;

import ru.softlab.efr.services.auth.exchange.model.CreateRoleRq;
import ru.softlab.efr.services.auth.exchange.model.EntityIdRs;
import ru.softlab.efr.services.auth.exchange.model.ErrorData;
import ru.softlab.efr.services.auth.exchange.model.GetRoleRs;
import ru.softlab.efr.services.auth.exchange.model.GetRolesRs;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.BindingResult;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.domain.*;

import java.util.*;

import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * the Roles API
 */
public interface RolesApi {

    /**
     * Запрос создания роли 
     * @param roleData Тело запроса создания сессии (аутентификация)  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/roles",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EntityIdRs> addRole(@Valid @RequestBody CreateRoleRq roleData) throws Exception;



    /**
     * Запрос удаления роли 
     * @param id Идентификатор роли  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/roles/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRole(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос получения данных роли 
     * @param id Идентификатор роли  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/roles/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetRoleRs> getRole(@PathVariable("id") Long id) throws Exception;



    /**
     * Запрос получения списка ролей   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetRolesRs> getRoles() throws Exception;



    /**
     * Запрос получения списка ролей (private api)   
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/private/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetRolesRs> getRolesWithOutPermissions() throws Exception;



    /**
     * Запрос обновления роли 
     * @param id Идентификатор роли
     * @param roleData Тело запроса обновления роли  
     * @return Экземпляр класса {@link ResponseEntity}
     * @throws Exception исключение, выбрасываемое в случае ошибок при выполнении метода
     */
    @RequestMapping(value = "/auth/v1/roles/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRole(@PathVariable("id") Long id,@Valid @RequestBody CreateRoleRq roleData) throws Exception;


}
