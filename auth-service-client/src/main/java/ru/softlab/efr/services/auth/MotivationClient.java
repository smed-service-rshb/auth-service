/*
 * API микросервиса авторизации
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.auth;

import ru.softlab.efr.services.auth.exchange.model.ErrorModel;
import java.time.LocalDate;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramAdmin;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramAdminList;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramUser;
import ru.softlab.efr.services.auth.exchange.model.MotivationProgramUserModify;
import ru.softlab.efr.services.auth.exchange.model.MotivationSettingsEditAdmin;
import org.springframework.core.io.Resource;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением auth-service
 **/
@Component
public class MotivationClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public MotivationClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "auth-service";
    }


    /**
     * Запрос программы мотивации для текущего пользователя
     * GET /auth/v1/motivation
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public MotivationProgramUser getMotivation(long timeout) throws RestClientException {
        return getMotivation().get(timeout);
    }

    /**
     * Запрос программы мотивации для текущего пользователя асинхронно
     * GET /auth/v1/motivation
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<MotivationProgramUser> getMotivation() throws RestClientException {
        return new ClientRestResult<>(getMotivationInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<MotivationProgramUser>> getMotivationInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<MotivationProgramUser>(){});
    }

    /**
     * Получить файл, прикрепленный к мотивации.
     * GET /auth/v1/motivation/{motivationDocumentTypes}/attach-document
     *
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Контент файла
     * @throws RestClientException в случае неудачи
    */
    public byte[] getMotivationAttachment(String motivationDocumentTypes, long timeout) throws RestClientException {
        return getMotivationAttachment(motivationDocumentTypes).get(timeout);
    }

    /**
     * Получить файл, прикрепленный к мотивации. асинхронно
     * GET /auth/v1/motivation/{motivationDocumentTypes}/attach-document
     *
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @return Контент файла
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getMotivationAttachment(String motivationDocumentTypes) throws RestClientException {
        return new ClientRestResult<>(getMotivationAttachmentInternal(motivationDocumentTypes), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getMotivationAttachmentInternal(String motivationDocumentTypes) throws RestClientException {
        if (motivationDocumentTypes == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationDocumentTypes", "getMotivationAttachment"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{motivationDocumentTypes}/attach-document")).variable("motivationDocumentTypes", motivationDocumentTypes);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Получить файл, прикрепленный к мотивации.
     * GET /auth/v1/motivation/{motivationId}/get-document/{motivationDocumentTypes}
     *
     * @param motivationId Идентификатор обращения клиента (required)
     * @param motivationDocumentTypes Типы документов мотивации:  PASSPORT - Паспорт  CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Контент файла
     * @throws RestClientException в случае неудачи
    */
    public byte[] getMotivationAttachmentById(Long motivationId, String motivationDocumentTypes, long timeout) throws RestClientException {
        return getMotivationAttachmentById(motivationId, motivationDocumentTypes).get(timeout);
    }

    /**
     * Получить файл, прикрепленный к мотивации. асинхронно
     * GET /auth/v1/motivation/{motivationId}/get-document/{motivationDocumentTypes}
     *
     * @param motivationId Идентификатор обращения клиента (required)
     * @param motivationDocumentTypes Типы документов мотивации:  PASSPORT - Паспорт  CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @return Контент файла
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getMotivationAttachmentById(Long motivationId, String motivationDocumentTypes) throws RestClientException {
        return new ClientRestResult<>(getMotivationAttachmentByIdInternal(motivationId, motivationDocumentTypes), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getMotivationAttachmentByIdInternal(Long motivationId, String motivationDocumentTypes) throws RestClientException {
        if (motivationId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationId", "getMotivationAttachmentById"));
        if (motivationDocumentTypes == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationDocumentTypes", "getMotivationAttachmentById"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{motivationId}/get-document/{motivationDocumentTypes}")).variable("motivationId", motivationId).variable("motivationDocumentTypes", motivationDocumentTypes);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Запрос признака необходимости отображения окна мотивации
     * GET /auth/v1/motivation/hide-window
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return признак необходимости отображения окна мотивации:
  true: скрывать окно
  false: отобразить окно

     * @throws RestClientException в случае неудачи
    */
    public Boolean getMotivationWindowHide(long timeout) throws RestClientException {
        return getMotivationWindowHide().get(timeout);
    }

    /**
     * Запрос признака необходимости отображения окна мотивации асинхронно
     * GET /auth/v1/motivation/hide-window
     *
     * @return признак необходимости отображения окна мотивации:
  true: скрывать окно
  false: отобразить окно

     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Boolean> getMotivationWindowHide() throws RestClientException {
        return new ClientRestResult<>(getMotivationWindowHideInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Boolean>> getMotivationWindowHideInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/hide-window"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Boolean>(){});
    }

    /**
     * Получить активную мотивацию для пользователя
     * GET /auth/v1/motivation/{userId}/get-latest
     *
     * @param userId Идентификатор пользователя (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public MotivationProgramAdmin getUserMotivationLatest(Long userId, long timeout) throws RestClientException {
        return getUserMotivationLatest(userId).get(timeout);
    }

    /**
     * Получить активную мотивацию для пользователя асинхронно
     * GET /auth/v1/motivation/{userId}/get-latest
     *
     * @param userId Идентификатор пользователя (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<MotivationProgramAdmin> getUserMotivationLatest(Long userId) throws RestClientException {
        return new ClientRestResult<>(getUserMotivationLatestInternal(userId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<MotivationProgramAdmin>> getUserMotivationLatestInternal(Long userId) throws RestClientException {
        if (userId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "userId", "getUserMotivationLatest"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{userId}/get-latest")).variable("userId", userId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<MotivationProgramAdmin>(){});
    }

    /**
     * Получить список мотиваций для пользователя
     * GET /auth/v1/motivation/{userId}/get-hystory-list
     *
     * @param userId Идентификатор пользователя (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public MotivationProgramAdminList getUserMotivationsList(Long userId, long timeout) throws RestClientException {
        return getUserMotivationsList(userId).get(timeout);
    }

    /**
     * Получить список мотиваций для пользователя асинхронно
     * GET /auth/v1/motivation/{userId}/get-hystory-list
     *
     * @param userId Идентификатор пользователя (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<MotivationProgramAdminList> getUserMotivationsList(Long userId) throws RestClientException {
        return new ClientRestResult<>(getUserMotivationsListInternal(userId), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<MotivationProgramAdminList>> getUserMotivationsListInternal(Long userId) throws RestClientException {
        if (userId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "userId", "getUserMotivationsList"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{userId}/get-hystory-list")).variable("userId", userId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<MotivationProgramAdminList>(){});
    }

    /**
     * Вывод отчета программ мотивации.
     * GET /auth/v1/motivation/report
     *
     * @param startDate Дата начала формирования отчета (optional)
     * @param endDate Дата окончания формирования отчета (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] getXlsxReport(LocalDate startDate, LocalDate endDate, long timeout) throws RestClientException {
        return getXlsxReport(startDate, endDate).get(timeout);
    }

    /**
     * Вывод отчета программ мотивации. асинхронно
     * GET /auth/v1/motivation/report
     *
     * @param startDate Дата начала формирования отчета (optional)
     * @param endDate Дата окончания формирования отчета (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> getXlsxReport(LocalDate startDate, LocalDate endDate) throws RestClientException {
        return new ClientRestResult<>(getXlsxReportInternal(startDate, endDate), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> getXlsxReportInternal(LocalDate startDate, LocalDate endDate) throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/report"));

        if (startDate != null)
            uriBuilder.param("startDate", DateParser.format(startDate));
        if (endDate != null)
            uriBuilder.param("endDate", DateParser.format(endDate));
        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Редактирование настроек программы мотивации пользователя
     * POST /auth/v1/motivation/{motivationId}/edit
     *
     * @param motivationId Идентификатор программы мотивации (required)
     * @param updateMotivationSettingsRq Тело запроса обновления настроек программы мотивации (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void motivationByMotivationIdEdit(Long motivationId, MotivationSettingsEditAdmin updateMotivationSettingsRq, long timeout) throws RestClientException {
        return motivationByMotivationIdEdit(motivationId, updateMotivationSettingsRq).get(timeout);
    }

    /**
     * Редактирование настроек программы мотивации пользователя асинхронно
     * POST /auth/v1/motivation/{motivationId}/edit
     *
     * @param motivationId Идентификатор программы мотивации (required)
     * @param updateMotivationSettingsRq Тело запроса обновления настроек программы мотивации (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> motivationByMotivationIdEdit(Long motivationId, MotivationSettingsEditAdmin updateMotivationSettingsRq) throws RestClientException {
        return new ClientRestResult<>(motivationByMotivationIdEditInternal(motivationId, updateMotivationSettingsRq), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> motivationByMotivationIdEditInternal(Long motivationId, MotivationSettingsEditAdmin updateMotivationSettingsRq) throws RestClientException {
        if (motivationId == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationId", "motivationByMotivationIdEdit"));
        if (updateMotivationSettingsRq == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "updateMotivationSettingsRq", "motivationByMotivationIdEdit"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{motivationId}/edit")).variable("motivationId", motivationId);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(updateMotivationSettingsRq);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Запрос на создание или редактирование программы мотивации для текущего пользователя
     * POST /auth/v1/motivation
     *
     * @param motivationProgramUserModify Запрос на создания или редактирование программы мотивации для текущего пользователя (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public MotivationProgramUser postMotivation(MotivationProgramUserModify motivationProgramUserModify, long timeout) throws RestClientException {
        return postMotivation(motivationProgramUserModify).get(timeout);
    }

    /**
     * Запрос на создание или редактирование программы мотивации для текущего пользователя асинхронно
     * POST /auth/v1/motivation
     *
     * @param motivationProgramUserModify Запрос на создания или редактирование программы мотивации для текущего пользователя (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<MotivationProgramUser> postMotivation(MotivationProgramUserModify motivationProgramUserModify) throws RestClientException {
        return new ClientRestResult<>(postMotivationInternal(motivationProgramUserModify), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<MotivationProgramUser>> postMotivationInternal(MotivationProgramUserModify motivationProgramUserModify) throws RestClientException {
        if (motivationProgramUserModify == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationProgramUserModify", "postMotivation"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(motivationProgramUserModify);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<MotivationProgramUser>(){});
    }

    /**
     * Получить данные печатной формы для мотивации.
     * GET /auth/v1/motivation/print
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public byte[] printMotivation(long timeout) throws RestClientException {
        return printMotivation().get(timeout);
    }

    /**
     * Получить данные печатной формы для мотивации. асинхронно
     * GET /auth/v1/motivation/print
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<byte[]> printMotivation() throws RestClientException {
        return new ClientRestResult<>(printMotivationInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<byte[]>> printMotivationInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/print"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<byte[]>(){});
    }

    /**
     * Прикрепить файл к мотивации.
     * POST /auth/v1/motivation/{motivationDocumentTypes}/attach-document
     *
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @param content Прикрепляемый файл (optional)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public String uploadMotivationAttachment(String motivationDocumentTypes, Resource content, long timeout) throws RestClientException {
        return uploadMotivationAttachment(motivationDocumentTypes, content).get(timeout);
    }

    /**
     * Прикрепить файл к мотивации. асинхронно
     * POST /auth/v1/motivation/{motivationDocumentTypes}/attach-document
     *
     * @param motivationDocumentTypes Типы документов мотивации:   PASSPORT - Паспорт   CHECK_FORM - Форма, подтвержденная подписью  (required)
     * @param content Прикрепляемый файл (optional)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<String> uploadMotivationAttachment(String motivationDocumentTypes, Resource content) throws RestClientException {
        return new ClientRestResult<>(uploadMotivationAttachmentInternal(motivationDocumentTypes, content), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<String>> uploadMotivationAttachmentInternal(String motivationDocumentTypes, Resource content) throws RestClientException {
        if (motivationDocumentTypes == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "motivationDocumentTypes", "uploadMotivationAttachment"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/motivation/{motivationDocumentTypes}/attach-document")).variable("motivationDocumentTypes", motivationDocumentTypes);

        MultiValueMap<String, Object> multipartMap = new LinkedMultiValueMap<>();
        if (content != null){
           multipartMap.add("content", content);
        } 
        

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(multipartMap);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<String>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
