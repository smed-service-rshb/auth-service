/*
 * API микросервиса авторизации
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.auth;

import ru.softlab.efr.services.auth.exchange.model.OfficeData;
import ru.softlab.efr.services.auth.exchange.model.OrgUnitsData;
import ru.softlab.efr.services.auth.exchange.model.OrgUnitsDataFull;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением auth-service
 **/
@Component
public class OrgUnitClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public OrgUnitClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "auth-service";
    }


    /**
     * Получить полные данные по структурному подразделению.
     * GET /auth/v1/orgunit/{id}
     *
     * @param id Идентификатор ОШС (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Данные ОШС
     * @throws RestClientException в случае неудачи
    */
    public OfficeData getOrgUnit(Long id, long timeout) throws RestClientException {
        return getOrgUnit(id).get(timeout);
    }

    /**
     * Получить полные данные по структурному подразделению. асинхронно
     * GET /auth/v1/orgunit/{id}
     *
     * @param id Идентификатор ОШС (required)
     * @return Данные ОШС
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<OfficeData> getOrgUnit(Long id) throws RestClientException {
        return new ClientRestResult<>(getOrgUnitInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<OfficeData>> getOrgUnitInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getOrgUnit"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/orgunit/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<OfficeData>(){});
    }

    /**
     * Получить список дочерних организационных структур.
     * GET /auth/v1/orgunits/children/{id}
     *
     * @param id Идентификатор ОШС (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Список организационных структур
     * @throws RestClientException в случае неудачи
    */
    public OrgUnitsData listChildOrgUnit(Long id, long timeout) throws RestClientException {
        return listChildOrgUnit(id).get(timeout);
    }

    /**
     * Получить список дочерних организационных структур. асинхронно
     * GET /auth/v1/orgunits/children/{id}
     *
     * @param id Идентификатор ОШС (required)
     * @return Список организационных структур
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<OrgUnitsData> listChildOrgUnit(Long id) throws RestClientException {
        return new ClientRestResult<>(listChildOrgUnitInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<OrgUnitsData>> listChildOrgUnitInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "listChildOrgUnit"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/orgunits/children/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<OrgUnitsData>(){});
    }

    /**
     * Получить полный список организационных структур.
     * GET /auth/v1/orgunits
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Список организацонных структур
     * @throws RestClientException в случае неудачи
    */
    public OrgUnitsDataFull listFullOrgUnits(long timeout) throws RestClientException {
        return listFullOrgUnits().get(timeout);
    }

    /**
     * Получить полный список организационных структур. асинхронно
     * GET /auth/v1/orgunits
     *
     * @return Список организацонных структур
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<OrgUnitsDataFull> listFullOrgUnits() throws RestClientException {
        return new ClientRestResult<>(listFullOrgUnitsInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<OrgUnitsDataFull>> listFullOrgUnitsInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/orgunits"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<OrgUnitsDataFull>(){});
    }

    /**
     * Получить список организационных структур указанного типа.
     * GET /auth/v1/orgunits/type/{orgUnitType}
     *
     * @param orgUnitType Тип ОШС, допустимые значения 0(РФ), 1(ВСП) (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return Список организационных структур
     * @throws RestClientException в случае неудачи
    */
    public OrgUnitsData listOrgUnitByType(Long orgUnitType, long timeout) throws RestClientException {
        return listOrgUnitByType(orgUnitType).get(timeout);
    }

    /**
     * Получить список организационных структур указанного типа. асинхронно
     * GET /auth/v1/orgunits/type/{orgUnitType}
     *
     * @param orgUnitType Тип ОШС, допустимые значения 0(РФ), 1(ВСП) (required)
     * @return Список организационных структур
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<OrgUnitsData> listOrgUnitByType(Long orgUnitType) throws RestClientException {
        return new ClientRestResult<>(listOrgUnitByTypeInternal(orgUnitType), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<OrgUnitsData>> listOrgUnitByTypeInternal(Long orgUnitType) throws RestClientException {
        if (orgUnitType == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "orgUnitType", "listOrgUnitByType"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/orgunits/type/{orgUnitType}")).variable("orgUnitType", orgUnitType);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<OrgUnitsData>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
