/*
 * API микросервиса авторизации
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ru.softlab.efr.services.auth;

import ru.softlab.efr.services.auth.exchange.model.CreateRoleRq;
import ru.softlab.efr.services.auth.exchange.model.EntityIdRs;
import ru.softlab.efr.services.auth.exchange.model.ErrorData;
import ru.softlab.efr.services.auth.exchange.model.GetRoleRs;
import ru.softlab.efr.services.auth.exchange.model.GetRolesRs;

import ru.softlab.efr.infrastructure.transport.client.*;
import ru.softlab.efr.common.utilities.rest.*;
import ru.softlab.efr.common.utilities.rest.client.*;
import ru.softlab.efr.common.utilities.rest.converters.DateParser;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import ru.softlab.efr.infrastructure.transport.client.impl.JmsUriBuilder;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.util.*;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.stereotype.Component;

import java.util.*;

/**
 * Содержит методы для взаимодействия с приложением auth-service
 **/
@Component
public class RolesClient {
    private static final String REQUIRED_PARAM_ERROR = "Не указан обязательный параметр '%s' при вызове %s";
    private String applicationName;
    private static final String STATUS_CODE_TEMPLATE = "status code: [%s]";

    private final MicroServiceTemplate microServiceTemplate;

    /**
     * Возвращяет экземпляр класса
     * @param microServiceTemplate - объект, реализующий интерфейс {@link MicroServiceTemplate}
     */
    public RolesClient(MicroServiceTemplate microServiceTemplate) {
        this.microServiceTemplate = microServiceTemplate;
        this.applicationName = "auth-service";
    }


    /**
     * Запрос создания роли
     * POST /auth/v1/roles
     *
     * @param roleData Тело запроса создания сессии (аутентификация) (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public EntityIdRs addRole(CreateRoleRq roleData, long timeout) throws RestClientException {
        return addRole(roleData).get(timeout);
    }

    /**
     * Запрос создания роли асинхронно
     * POST /auth/v1/roles
     *
     * @param roleData Тело запроса создания сессии (аутентификация) (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<EntityIdRs> addRole(CreateRoleRq roleData) throws RestClientException {
        return new ClientRestResult<>(addRoleInternal(roleData), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<EntityIdRs>> addRoleInternal(CreateRoleRq roleData) throws RestClientException {
        if (roleData == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "roleData", "addRole"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/roles"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.POST, uriBuilder.build())
                  .body(roleData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<EntityIdRs>(){});
    }

    /**
     * Запрос удаления роли
     * DELETE /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void deleteRole(Long id, long timeout) throws RestClientException {
        return deleteRole(id).get(timeout);
    }

    /**
     * Запрос удаления роли асинхронно
     * DELETE /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> deleteRole(Long id) throws RestClientException {
        return new ClientRestResult<>(deleteRoleInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> deleteRoleInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "deleteRole"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/roles/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.DELETE, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }

    /**
     * Запрос получения данных роли
     * GET /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public GetRoleRs getRole(Long id, long timeout) throws RestClientException {
        return getRole(id).get(timeout);
    }

    /**
     * Запрос получения данных роли асинхронно
     * GET /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<GetRoleRs> getRole(Long id) throws RestClientException {
        return new ClientRestResult<>(getRoleInternal(id), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<GetRoleRs>> getRoleInternal(Long id) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "getRole"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/roles/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<GetRoleRs>(){});
    }

    /**
     * Запрос получения списка ролей
     * GET /auth/v1/roles
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public GetRolesRs getRoles(long timeout) throws RestClientException {
        return getRoles().get(timeout);
    }

    /**
     * Запрос получения списка ролей асинхронно
     * GET /auth/v1/roles
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<GetRolesRs> getRoles() throws RestClientException {
        return new ClientRestResult<>(getRolesInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<GetRolesRs>> getRolesInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/roles"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<GetRolesRs>(){});
    }

    /**
     * Запрос получения списка ролей (private api)
     * GET /auth/v1/private/roles
     *
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public GetRolesRs getRolesWithOutPermissions(long timeout) throws RestClientException {
        return getRolesWithOutPermissions().get(timeout);
    }

    /**
     * Запрос получения списка ролей (private api) асинхронно
     * GET /auth/v1/private/roles
     *
     * @return 
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<GetRolesRs> getRolesWithOutPermissions() throws RestClientException {
        return new ClientRestResult<>(getRolesWithOutPermissionsInternal(), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<GetRolesRs>> getRolesWithOutPermissionsInternal() throws RestClientException {
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/private/roles"));

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.GET, uriBuilder.build())
                  .build();
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<GetRolesRs>(){});
    }

    /**
     * Запрос обновления роли
     * PUT /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @param roleData Тело запроса обновления роли (required)
     * @param timeout таймаут ожидания ответа на асинхронный запрос
     * @throws RestClientException в случае неудачи
    */
    public Void updateRole(Long id, CreateRoleRq roleData, long timeout) throws RestClientException {
        return updateRole(id, roleData).get(timeout);
    }

    /**
     * Запрос обновления роли асинхронно
     * PUT /auth/v1/roles/{id}
     *
     * @param id Идентификатор роли (required)
     * @param roleData Тело запроса обновления роли (required)
     * @throws RestClientException в случае неудачи
    */
    public ClientRestResult<Void> updateRole(Long id, CreateRoleRq roleData) throws RestClientException {
        return new ClientRestResult<>(updateRoleInternal(id, roleData), this::processStatusCodeErrors);
    }

    private ListenableFuture<ResponseEntity<Void>> updateRoleInternal(Long id, CreateRoleRq roleData) throws RestClientException {
        if (id == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "id", "updateRole"));
        if (roleData == null)
            throw new RestClientException(String.format(REQUIRED_PARAM_ERROR, "roleData", "updateRole"));
        

        MicroServiceURIBuilder uriBuilder = JmsUriBuilder.service(applicationName)
            .path(cutComments("/auth/v1/roles/{id}")).variable("id", id);

        RequestEntity requestEntity = RequestEntity
                  .method(HttpMethod.PUT, uriBuilder.build())
                  .body(roleData);
        return microServiceTemplate.exchange(requestEntity,
                    new ParameterizedTypeReference<Void>(){});
    }
    private String cutComments(String path) {
        return path.split("#", 2)[0];
    }

    private void addPageableParams(MicroServiceURIBuilder builder, Pageable pageable) {
        if (pageable != null) {
            builder.param("page", pageable.getPageNumber());
            builder.param("size", pageable.getPageSize());
            Sort sort = pageable.getSort();
            if (sort != null) {
                List<String> sortParams = new ArrayList<>();
                for (Sort.Order next : sort) {
                    sortParams.add(next.getProperty());
                }
                sortParams.add(sort.getOrderFor(sortParams.get(0)).getDirection().name());
                builder.param("sort", String.join(",", sortParams));
            }
        }
    }

    private void processStatusCodeErrors(Exception e) throws RestClientException {
            HttpStatus statusCode = RestUtils.getStatusCode(e);
            if (statusCode != null) {
                switch (statusCode) {
                    case INTERNAL_SERVER_ERROR:
                        throw new RestClientException(String.format(STATUS_CODE_TEMPLATE, HttpStatus.INTERNAL_SERVER_ERROR.toString()));
                    case CONFLICT:
                        throw new EntityExistsException();
                    case NOT_FOUND:
                        throw new NotFoundException();
                }
            }
            throw new RestClientException(e.toString());
    }
}
